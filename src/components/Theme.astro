---
import { SITE } from "@src/consts";
import Icon from "@src/components/Icon.astro";

const isDark = SITE.defaultTheme === "dark";
---

<button data-theme-toggle  aria-label=`Change to ${isDark ? "light" : "dark"} theme`>
  {isDark ? <Icon name="dark" /> : <Icon name="light" />}</button
>

<script>
  const darkSvg = `
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
    <path fill="currentColor" d="M12.058 20q-3.334 0-5.667-2.333Q4.058 15.333 4.058 12q0-3.038 1.98-5.27Q8.02 4.5 10.942 4.097q.081 0 .159.006t.153.017q-.506.706-.801 1.57q-.295.865-.295 1.811q0 2.667 1.866 4.533q1.867 1.867 4.534 1.867q.952 0 1.813-.295q.862-.295 1.548-.801q.012.075.018.153q.005.078.005.158q-.384 2.923-2.615 4.904T12.057 20Zm0-1q2.2 0 3.95-1.213t2.55-3.162q-.5.125-1 .2t-1 .075q-3.075 0-5.238-2.163T9.158 7.5q0-.5.075-1t.2-1q-1.95.8-3.163 2.55T5.058 12q0 2.9 2.05 4.95t4.95 2.05Zm-.25-6.75Z"/>
</svg>  `;
  const lightSvg = `
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 32 32">
    <path fill="currentColor" d="M15 2h2v5h-2zm6.688 6.9l3.506-3.506l1.414 1.414l-3.506 3.506zM25 15h5v2h-5zm-3.312 8.1l1.414-1.413l3.506 3.506l-1.414 1.414zM15 25h2v5h-2zm-9.606.192L8.9 21.686l1.414 1.414l-3.505 3.506zM2 15h5v2H2zm3.395-8.192l1.414-1.414L10.315 8.9L8.9 10.314zM16 12a4 4 0 1 1-4 4a4.005 4.005 0 0 1 4-4m0-2a6 6 0 1 0 6 6a6 6 0 0 0-6-6Z"/>
</svg>
  `;

  let buttonThemeToggle;
  let localStorageTheme;

  function toggleThme() {
    const newTheme =
      localStorage.getItem("theme") === "dark" ? "light" : "dark";

    if (newTheme === "light") {
      updateThemeBody("light");
      setGiscusTheme("light");
    } else {
      updateThemeBody("dark");
      setGiscusTheme("dark");
    }

    buttonThemeToggle.innerHTML = newTheme === "light" ? lightSvg : darkSvg;

    const newCta =
      newTheme === "dark" ? "Change to light theme" : "Change to dark theme";
    buttonThemeToggle.setAttribute("aria-label", newCta);

    localStorage.setItem("theme", newTheme);
  }

  function updateThemeBody(newTheme: string) {
    document.querySelector("html")?.setAttribute("data-theme", newTheme);
  }

  function initialize() {
    buttonThemeToggle = document.querySelector("[data-theme-toggle]");
    localStorageTheme = localStorage.getItem("theme");
    if (localStorageTheme === null) {
      localStorage.setItem("theme", "light");
      localStorageTheme = "light";
    }
    if (localStorageTheme === "light") {
      updateThemeBody("light");
    } else {
      updateThemeBody("dark");
    }
    buttonThemeToggle.innerHTML =
      localStorageTheme === "light" ? lightSvg : darkSvg;
    buttonThemeToggle.addEventListener("click", toggleThme);
  }

  function setGiscusTheme(theme) {
    const iframe = document.querySelector('.giscus-frame') as HTMLIFrameElement | null;

    if (iframe) {
      const url = new URL(iframe.src);
      url.searchParams.set('theme', theme);
      iframe.src = url.toString();
    }
  }

  initialize();

  document.addEventListener("astro:after-swap", initialize);
</script>
