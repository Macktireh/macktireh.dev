---
import { getPosts, getPostsByLang, type BlogType } from "@src/content/config";
import FormattedDate from "@src/components/FormattedDate.astro";
import { type PageType } from "@src/helpers/types";
import Layout from "@src/layouts/Layout.astro";
import {
  DEFAULT_LANG,
  LOCALES,
  useTranslations,
  type LangType,
} from "@src/i18n/utils";
import { PAGE_SIZE } from "@src/consts";
import Link from "@src/components/Link.astro";
import LangSelector from "@src/components/LangSelector.astro";

export async function getStaticPaths({ paginate }) {
  const posts = await getPosts();
  return LOCALES.flatMap((lang) => {
    const posts_filtered = posts.filter((blog) => {
      return blog?.data?.lang === lang;
    });
    return paginate(posts_filtered, { params: { lang }, pageSize: PAGE_SIZE });
  });
}

const { lang } = Astro.params;
const { page } = Astro.props as { page: PageType<BlogType> };
const t = useTranslations(lang);

let locales: LangType[] = [];
let postsByLang: { [key: string]: any } = {};

for (const _lang of LOCALES) {
  const posts = await getPostsByLang(_lang);
  postsByLang[_lang] = posts;

  const totalPages = Math.ceil(posts.length / PAGE_SIZE);
  if (totalPages >= page.currentPage) {
    locales.push(_lang);
  }
}
---

<Layout title="Blog" description="Blog" lang={lang} translated={false}>
  <LangSelector slot="lang-selector" locales={locales} />
  <main class="main-posts">
    <section id="posts-list">
      <ul>
        {
          page.data.map((post) => (
            <li>
              <Link href={post.pathname} lang={lang}>
                <img
                  width={720}
                  height={360}
                  src={post.data.heroImage}
                  alt=""
                />
                <h4 class="title">{post.data.title}</h4>
                <p class="date">
                  <FormattedDate date={post.data.pubDate} />
                </p>
              </Link>
            </li>
          ))
        }
      </ul>
      <div class="pagination">
        {
          page.url.first ? (
            <a href={page.url.first} class="page-link first-page">
              {t("pagination.first")}
            </a>
          ) : (
            <span class="disabled">{t("pagination.first")}</span>
          )
        }
        {
          page.url.prev ? (
            <a href={page.url.prev} class="page-link prev-page">
              {t("pagination.prev")}
            </a>
          ) : (
            <span class="disabled">{t("pagination.prev")}</span>
          )
        }
        <span class="current-page"
          >{t("page")} {page.currentPage}/{page.lastPage}</span
        >
        {
          page.url.next ? (
            <a href={page.url.next} class="page-link next-page">
              {t("pagination.next")}
            </a>
          ) : (
            <span class="disabled">{t("pagination.next")}</span>
          )
        }
        {
          page.url.last ? (
            <a href={page.url.last} class="page-link last-page">
              {t("pagination.last")}
            </a>
          ) : (
            <span class="disabled">{t("pagination.last")}</span>
          )
        }
      </div>
    </section>
  </main>
</Layout>
